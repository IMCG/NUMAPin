# smooths frame data generated by summarizeInterconnect program
# Takes 2 inputs
# inputFile #ofFramesToAverage

import sys, collections

[filename, averageOver] = sys.argv[1:3]

n = int(averageOver)

# data format
# frame	source	dest	reads	writes

def computeFrameAverage(i, n, lines):
	return

# create a rolling average over the frames
# for now ignore frame numbers, assume
# all frame numbers are sequntial and no gaps

f = open(filename)

# reprint the header
print f.readline()[:-1]

# all lines into a big list
data = f.readlines()
# split all the columns; now have a list of lists
lines = map(lambda x: x[:-1].split("\t"), data)
# structure to organize data
frameData = collections.defaultdict(dict)
# populate the data
for l in lines:
	[frame, source, dest, reads, writes] = l
	frameData[int(frame)][(source, dest)] = (int(reads), int(writes))

# figure out the maximum frame number	
frames = map(lambda x: int(x[0]), lines)
frames = set(frames)
maxFrame = max(frames)
minFrame = min(frames)


#print minFrame, maxFrame
for i in range(minFrame, maxFrame - n):
	reads = collections.defaultdict(int)
	writes = collections.defaultdict(int)
	for k in range(i, i + n):
		for srcDest in frameData[k]:
			(r,w) = frameData[k][srcDest]
			reads[srcDest] += r
			writes[srcDest] += w
	keys = set(reads.keys() + writes.keys())
	for srcDest in keys:
		avgReads = reads[srcDest]/n
		avgWrites = writes[srcDest]/n
		print "\t".join(map(str, [i, srcDest[0], srcDest[1], avgReads, avgWrites]))


	
	

